{"ast":null,"code":"const resolveURL = require('resolve-url');\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\n\n\nconst readFromBlobOrFile = blob => new Promise((resolve, reject) => {\n  const fileReader = new FileReader();\n\n  fileReader.onload = () => {\n    resolve(fileReader.result);\n  };\n\n  fileReader.onerror = _ref => {\n    let {\n      target: {\n        error: {\n          code\n        }\n      }\n    } = _ref;\n    reject(Error(`File could not be read! Code=${code}`));\n  };\n\n  fileReader.readAsArrayBuffer(blob);\n});\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\n\n\nconst loadImage = async image => {\n  let data = image;\n\n  if (typeof image === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof image === 'string') {\n    // Base64 Image\n    if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n      data = atob(image.split(',')[1]).split('').map(c => c.charCodeAt(0));\n    } else {\n      const resp = await fetch(resolveURL(image));\n      data = await resp.arrayBuffer();\n    }\n  } else if (image instanceof HTMLElement) {\n    if (image.tagName === 'IMG') {\n      data = await loadImage(image.src);\n    }\n\n    if (image.tagName === 'VIDEO') {\n      data = await loadImage(image.poster);\n    }\n\n    if (image.tagName === 'CANVAS') {\n      await new Promise(resolve => {\n        image.toBlob(async blob => {\n          data = await readFromBlobOrFile(blob);\n          resolve();\n        });\n      });\n    }\n  } else if (image instanceof File || image instanceof Blob) {\n    data = await readFromBlobOrFile(image);\n  }\n\n  return new Uint8Array(data);\n};\n\nmodule.exports = loadImage;","map":{"version":3,"names":["resolveURL","require","readFromBlobOrFile","blob","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","target","error","code","Error","readAsArrayBuffer","loadImage","image","data","test","atob","split","map","c","charCodeAt","resp","fetch","arrayBuffer","HTMLElement","tagName","src","poster","toBlob","File","Blob","Uint8Array","module","exports"],"sources":["/home/khas/Git/TI2-TraductorOCR/node_modules/tesseract.js/src/worker/browser/loadImage.js"],"sourcesContent":["const resolveURL = require('resolve-url');\n\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\nconst readFromBlobOrFile = blob => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\nconst loadImage = async (image) => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof image === 'string') {\n    // Base64 Image\n    if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n      data = atob(image.split(',')[1])\n        .split('')\n        .map(c => c.charCodeAt(0));\n    } else {\n      const resp = await fetch(resolveURL(image));\n      data = await resp.arrayBuffer();\n    }\n  } else if (image instanceof HTMLElement) {\n    if (image.tagName === 'IMG') {\n      data = await loadImage(image.src);\n    }\n    if (image.tagName === 'VIDEO') {\n      data = await loadImage(image.poster);\n    }\n    if (image.tagName === 'CANVAS') {\n      await new Promise((resolve) => {\n        image.toBlob(async (blob) => {\n          data = await readFromBlobOrFile(blob);\n          resolve();\n        });\n      });\n    }\n  } else if (image instanceof File || image instanceof Blob) {\n    data = await readFromBlobOrFile(image);\n  }\n\n  return new Uint8Array(data);\n};\n\nmodule.exports = loadImage;\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,kBAAkB,GAAGC,IAAI,IAC7B,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAC/B,MAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;EACAD,UAAU,CAACE,MAAX,GAAoB,MAAM;IACxBJ,OAAO,CAACE,UAAU,CAACG,MAAZ,CAAP;EACD,CAFD;;EAGAH,UAAU,CAACI,OAAX,GAAqB,QAAqC;IAAA,IAApC;MAAEC,MAAM,EAAE;QAAEC,KAAK,EAAE;UAAEC;QAAF;MAAT;IAAV,CAAoC;IACxDR,MAAM,CAACS,KAAK,CAAE,gCAA+BD,IAAK,EAAtC,CAAN,CAAN;EACD,CAFD;;EAGAP,UAAU,CAACS,iBAAX,CAA6Bb,IAA7B;AACD,CATD,CADF;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMc,SAAS,GAAG,MAAOC,KAAP,IAAiB;EACjC,IAAIC,IAAI,GAAGD,KAAX;;EACA,IAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;IAChC,OAAO,WAAP;EACD;;EAED,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B;IACA,IAAI,yCAAyCE,IAAzC,CAA8CF,KAA9C,CAAJ,EAA0D;MACxDC,IAAI,GAAGE,IAAI,CAACH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAJ,CACJA,KADI,CACE,EADF,EAEJC,GAFI,CAEAC,CAAC,IAAIA,CAAC,CAACC,UAAF,CAAa,CAAb,CAFL,CAAP;IAGD,CAJD,MAIO;MACL,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC3B,UAAU,CAACkB,KAAD,CAAX,CAAxB;MACAC,IAAI,GAAG,MAAMO,IAAI,CAACE,WAAL,EAAb;IACD;EACF,CAVD,MAUO,IAAIV,KAAK,YAAYW,WAArB,EAAkC;IACvC,IAAIX,KAAK,CAACY,OAAN,KAAkB,KAAtB,EAA6B;MAC3BX,IAAI,GAAG,MAAMF,SAAS,CAACC,KAAK,CAACa,GAAP,CAAtB;IACD;;IACD,IAAIb,KAAK,CAACY,OAAN,KAAkB,OAAtB,EAA+B;MAC7BX,IAAI,GAAG,MAAMF,SAAS,CAACC,KAAK,CAACc,MAAP,CAAtB;IACD;;IACD,IAAId,KAAK,CAACY,OAAN,KAAkB,QAAtB,EAAgC;MAC9B,MAAM,IAAI1B,OAAJ,CAAaC,OAAD,IAAa;QAC7Ba,KAAK,CAACe,MAAN,CAAa,MAAO9B,IAAP,IAAgB;UAC3BgB,IAAI,GAAG,MAAMjB,kBAAkB,CAACC,IAAD,CAA/B;UACAE,OAAO;QACR,CAHD;MAID,CALK,CAAN;IAMD;EACF,CAfM,MAeA,IAAIa,KAAK,YAAYgB,IAAjB,IAAyBhB,KAAK,YAAYiB,IAA9C,EAAoD;IACzDhB,IAAI,GAAG,MAAMjB,kBAAkB,CAACgB,KAAD,CAA/B;EACD;;EAED,OAAO,IAAIkB,UAAJ,CAAejB,IAAf,CAAP;AACD,CApCD;;AAsCAkB,MAAM,CAACC,OAAP,GAAiBrB,SAAjB"},"metadata":{},"sourceType":"script"}